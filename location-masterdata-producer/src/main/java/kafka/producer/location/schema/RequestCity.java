/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package kafka.producer.location.schema;

import lombok.Builder;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
@Builder
public class RequestCity extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6793207056372518103L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RequestCity\",\"namespace\":\"kafka.producer.location.schema\",\"fields\":[{\"name\":\"alternateCodes\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"AlternateCode\",\"fields\":[{\"name\":\"code\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"codeType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}}],\"java-class\":\"java.util.List\"},{\"name\":\"alternateNames\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"java-class\":\"java.util.List\"},{\"name\":\"bdaLocations\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"bdaType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"bdas\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Bda\",\"fields\":[{\"name\":\"alternateCodes\",\"type\":{\"type\":\"array\",\"items\":\"AlternateCode\"}},{\"name\":\"bdaType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"type\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}}],\"java-class\":\"java.util.List\"},{\"name\":\"country\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Country\",\"fields\":[{\"name\":\"alternateCodes\",\"type\":{\"type\":\"array\",\"items\":\"AlternateCode\"}},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}]},{\"name\":\"daylightSavingEnd\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"daylightSavingShiftMinutes\",\"type\":[\"null\",\"int\"]},{\"name\":\"daylightSavingStart\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"daylightSavingTime\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"description\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"dialingCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"dialingCodeDescription\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"geoType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"hsudName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"isMaerskCity\",\"type\":[\"null\",\"boolean\"]},{\"name\":\"latitude\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"locationId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"longitude\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"name\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"olsonTimezone\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"parents\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Parent\",\"fields\":[{\"name\":\"alternateCodes\",\"type\":{\"type\":\"array\",\"items\":\"AlternateCode\"}},{\"name\":\"bdaType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"type\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}}],\"java-class\":\"java.util.List\"},{\"name\":\"portFlag\",\"type\":[\"null\",\"boolean\"]},{\"name\":\"postalCodeMandatory\",\"type\":[\"null\",\"boolean\"]},{\"name\":\"restricted\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"stateProvinceMandatory\",\"type\":[\"null\",\"boolean\"]},{\"name\":\"status\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"subCityParents\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"java-class\":\"java.util.List\"},{\"name\":\"timeZone\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"utcOffsetMinutes\",\"type\":[\"null\",\"int\"]},{\"name\":\"validFrom\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"validTo\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"workaroundReason\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<RequestCity> ENCODER =
      new BinaryMessageEncoder<RequestCity>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<RequestCity> DECODER =
      new BinaryMessageDecoder<RequestCity>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<RequestCity> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<RequestCity> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<RequestCity> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<RequestCity>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this RequestCity to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a RequestCity from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a RequestCity instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static RequestCity fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.util.List<AlternateCodeAvro> alternateCodes;
  private java.util.List<java.lang.String> alternateNames;
  private java.lang.String bdaLocations;
  private java.lang.String bdaType;
  private java.util.List<BdaAvro> bdas;
  private CountryAvro country;
  private java.lang.String daylightSavingEnd;
  private java.lang.Integer daylightSavingShiftMinutes;
  private java.lang.String daylightSavingStart;
  private java.lang.String daylightSavingTime;
  private java.lang.String description;
  private java.lang.String dialingCode;
  private java.lang.String dialingCodeDescription;
  private java.lang.String geoType;
  private java.lang.String hsudName;
  private java.lang.Boolean isMaerskCity;
  private java.lang.String latitude;
  private java.lang.String locationId;
  private java.lang.String longitude;
  private java.lang.String name;
  private java.lang.String olsonTimezone;
  private java.util.List<ParentAvro> parents;
  private java.lang.Boolean portFlag;
  private java.lang.Boolean postalCodeMandatory;
  private java.lang.String restricted;
  private java.lang.Boolean stateProvinceMandatory;
  private java.lang.String status;
  private java.util.List<java.lang.String> subCityParents;
  private java.lang.String timeZone;
  private java.lang.Integer utcOffsetMinutes;
  private java.lang.String validFrom;
  private java.lang.String validTo;
  private java.lang.String workaroundReason;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public RequestCity() {}

  /**
   * All-args constructor.
   * @param alternateCodes The new value for alternateCodes
   * @param alternateNames The new value for alternateNames
   * @param bdaLocations The new value for bdaLocations
   * @param bdaType The new value for bdaType
   * @param bdas The new value for bdas
   * @param country The new value for country
   * @param daylightSavingEnd The new value for daylightSavingEnd
   * @param daylightSavingShiftMinutes The new value for daylightSavingShiftMinutes
   * @param daylightSavingStart The new value for daylightSavingStart
   * @param daylightSavingTime The new value for daylightSavingTime
   * @param description The new value for description
   * @param dialingCode The new value for dialingCode
   * @param dialingCodeDescription The new value for dialingCodeDescription
   * @param geoType The new value for geoType
   * @param hsudName The new value for hsudName
   * @param isMaerskCity The new value for isMaerskCity
   * @param latitude The new value for latitude
   * @param locationId The new value for locationId
   * @param longitude The new value for longitude
   * @param name The new value for name
   * @param olsonTimezone The new value for olsonTimezone
   * @param parents The new value for parents
   * @param portFlag The new value for portFlag
   * @param postalCodeMandatory The new value for postalCodeMandatory
   * @param restricted The new value for restricted
   * @param stateProvinceMandatory The new value for stateProvinceMandatory
   * @param status The new value for status
   * @param subCityParents The new value for subCityParents
   * @param timeZone The new value for timeZone
   * @param utcOffsetMinutes The new value for utcOffsetMinutes
   * @param validFrom The new value for validFrom
   * @param validTo The new value for validTo
   * @param workaroundReason The new value for workaroundReason
   */
  public RequestCity(java.util.List<AlternateCodeAvro> alternateCodes, java.util.List<java.lang.String> alternateNames, java.lang.String bdaLocations, java.lang.String bdaType, java.util.List<BdaAvro> bdas, CountryAvro country, java.lang.String daylightSavingEnd, java.lang.Integer daylightSavingShiftMinutes, java.lang.String daylightSavingStart, java.lang.String daylightSavingTime, java.lang.String description, java.lang.String dialingCode, java.lang.String dialingCodeDescription, java.lang.String geoType, java.lang.String hsudName, java.lang.Boolean isMaerskCity, java.lang.String latitude, java.lang.String locationId, java.lang.String longitude, java.lang.String name, java.lang.String olsonTimezone, java.util.List<ParentAvro> parents, java.lang.Boolean portFlag, java.lang.Boolean postalCodeMandatory, java.lang.String restricted, java.lang.Boolean stateProvinceMandatory, java.lang.String status, java.util.List<java.lang.String> subCityParents, java.lang.String timeZone, java.lang.Integer utcOffsetMinutes, java.lang.String validFrom, java.lang.String validTo, java.lang.String workaroundReason) {
    this.alternateCodes = alternateCodes;
    this.alternateNames = alternateNames;
    this.bdaLocations = bdaLocations;
    this.bdaType = bdaType;
    this.bdas = bdas;
    this.country = country;
    this.daylightSavingEnd = daylightSavingEnd;
    this.daylightSavingShiftMinutes = daylightSavingShiftMinutes;
    this.daylightSavingStart = daylightSavingStart;
    this.daylightSavingTime = daylightSavingTime;
    this.description = description;
    this.dialingCode = dialingCode;
    this.dialingCodeDescription = dialingCodeDescription;
    this.geoType = geoType;
    this.hsudName = hsudName;
    this.isMaerskCity = isMaerskCity;
    this.latitude = latitude;
    this.locationId = locationId;
    this.longitude = longitude;
    this.name = name;
    this.olsonTimezone = olsonTimezone;
    this.parents = parents;
    this.portFlag = portFlag;
    this.postalCodeMandatory = postalCodeMandatory;
    this.restricted = restricted;
    this.stateProvinceMandatory = stateProvinceMandatory;
    this.status = status;
    this.subCityParents = subCityParents;
    this.timeZone = timeZone;
    this.utcOffsetMinutes = utcOffsetMinutes;
    this.validFrom = validFrom;
    this.validTo = validTo;
    this.workaroundReason = workaroundReason;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return alternateCodes;
    case 1: return alternateNames;
    case 2: return bdaLocations;
    case 3: return bdaType;
    case 4: return bdas;
    case 5: return country;
    case 6: return daylightSavingEnd;
    case 7: return daylightSavingShiftMinutes;
    case 8: return daylightSavingStart;
    case 9: return daylightSavingTime;
    case 10: return description;
    case 11: return dialingCode;
    case 12: return dialingCodeDescription;
    case 13: return geoType;
    case 14: return hsudName;
    case 15: return isMaerskCity;
    case 16: return latitude;
    case 17: return locationId;
    case 18: return longitude;
    case 19: return name;
    case 20: return olsonTimezone;
    case 21: return parents;
    case 22: return portFlag;
    case 23: return postalCodeMandatory;
    case 24: return restricted;
    case 25: return stateProvinceMandatory;
    case 26: return status;
    case 27: return subCityParents;
    case 28: return timeZone;
    case 29: return utcOffsetMinutes;
    case 30: return validFrom;
    case 31: return validTo;
    case 32: return workaroundReason;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: alternateCodes = (java.util.List<AlternateCodeAvro>)value$; break;
    case 1: alternateNames = (java.util.List<java.lang.String>)value$; break;
    case 2: bdaLocations = value$ != null ? value$.toString() : null; break;
    case 3: bdaType = value$ != null ? value$.toString() : null; break;
    case 4: bdas = (java.util.List<BdaAvro>)value$; break;
    case 5: country = (CountryAvro)value$; break;
    case 6: daylightSavingEnd = value$ != null ? value$.toString() : null; break;
    case 7: daylightSavingShiftMinutes = (java.lang.Integer)value$; break;
    case 8: daylightSavingStart = value$ != null ? value$.toString() : null; break;
    case 9: daylightSavingTime = value$ != null ? value$.toString() : null; break;
    case 10: description = value$ != null ? value$.toString() : null; break;
    case 11: dialingCode = value$ != null ? value$.toString() : null; break;
    case 12: dialingCodeDescription = value$ != null ? value$.toString() : null; break;
    case 13: geoType = value$ != null ? value$.toString() : null; break;
    case 14: hsudName = value$ != null ? value$.toString() : null; break;
    case 15: isMaerskCity = (java.lang.Boolean)value$; break;
    case 16: latitude = value$ != null ? value$.toString() : null; break;
    case 17: locationId = value$ != null ? value$.toString() : null; break;
    case 18: longitude = value$ != null ? value$.toString() : null; break;
    case 19: name = value$ != null ? value$.toString() : null; break;
    case 20: olsonTimezone = value$ != null ? value$.toString() : null; break;
    case 21: parents = (java.util.List<ParentAvro>)value$; break;
    case 22: portFlag = (java.lang.Boolean)value$; break;
    case 23: postalCodeMandatory = (java.lang.Boolean)value$; break;
    case 24: restricted = value$ != null ? value$.toString() : null; break;
    case 25: stateProvinceMandatory = (java.lang.Boolean)value$; break;
    case 26: status = value$ != null ? value$.toString() : null; break;
    case 27: subCityParents = (java.util.List<java.lang.String>)value$; break;
    case 28: timeZone = value$ != null ? value$.toString() : null; break;
    case 29: utcOffsetMinutes = (java.lang.Integer)value$; break;
    case 30: validFrom = value$ != null ? value$.toString() : null; break;
    case 31: validTo = value$ != null ? value$.toString() : null; break;
    case 32: workaroundReason = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'alternateCodes' field.
   * @return The value of the 'alternateCodes' field.
   */
  public java.util.List<AlternateCodeAvro> getAlternateCodes() {
    return alternateCodes;
  }


  /**
   * Sets the value of the 'alternateCodes' field.
   * @param value the value to set.
   */
  public void setAlternateCodes(java.util.List<AlternateCodeAvro> value) {
    this.alternateCodes = value;
  }

  /**
   * Gets the value of the 'alternateNames' field.
   * @return The value of the 'alternateNames' field.
   */
  public java.util.List<java.lang.String> getAlternateNames() {
    return alternateNames;
  }


  /**
   * Sets the value of the 'alternateNames' field.
   * @param value the value to set.
   */
  public void setAlternateNames(java.util.List<java.lang.String> value) {
    this.alternateNames = value;
  }

  /**
   * Gets the value of the 'bdaLocations' field.
   * @return The value of the 'bdaLocations' field.
   */
  public java.lang.String getBdaLocations() {
    return bdaLocations;
  }


  /**
   * Sets the value of the 'bdaLocations' field.
   * @param value the value to set.
   */
  public void setBdaLocations(java.lang.String value) {
    this.bdaLocations = value;
  }

  /**
   * Gets the value of the 'bdaType' field.
   * @return The value of the 'bdaType' field.
   */
  public java.lang.String getBdaType() {
    return bdaType;
  }


  /**
   * Sets the value of the 'bdaType' field.
   * @param value the value to set.
   */
  public void setBdaType(java.lang.String value) {
    this.bdaType = value;
  }

  /**
   * Gets the value of the 'bdas' field.
   * @return The value of the 'bdas' field.
   */
  public java.util.List<BdaAvro> getBdas() {
    return bdas;
  }


  /**
   * Sets the value of the 'bdas' field.
   * @param value the value to set.
   */
  public void setBdas(java.util.List<BdaAvro> value) {
    this.bdas = value;
  }

  /**
   * Gets the value of the 'country' field.
   * @return The value of the 'country' field.
   */
  public CountryAvro getCountry() {
    return country;
  }


  /**
   * Sets the value of the 'country' field.
   * @param value the value to set.
   */
  public void setCountry(CountryAvro value) {
    this.country = value;
  }

  /**
   * Gets the value of the 'daylightSavingEnd' field.
   * @return The value of the 'daylightSavingEnd' field.
   */
  public java.lang.String getDaylightSavingEnd() {
    return daylightSavingEnd;
  }


  /**
   * Sets the value of the 'daylightSavingEnd' field.
   * @param value the value to set.
   */
  public void setDaylightSavingEnd(java.lang.String value) {
    this.daylightSavingEnd = value;
  }

  /**
   * Gets the value of the 'daylightSavingShiftMinutes' field.
   * @return The value of the 'daylightSavingShiftMinutes' field.
   */
  public java.lang.Integer getDaylightSavingShiftMinutes() {
    return daylightSavingShiftMinutes;
  }


  /**
   * Sets the value of the 'daylightSavingShiftMinutes' field.
   * @param value the value to set.
   */
  public void setDaylightSavingShiftMinutes(java.lang.Integer value) {
    this.daylightSavingShiftMinutes = value;
  }

  /**
   * Gets the value of the 'daylightSavingStart' field.
   * @return The value of the 'daylightSavingStart' field.
   */
  public java.lang.String getDaylightSavingStart() {
    return daylightSavingStart;
  }


  /**
   * Sets the value of the 'daylightSavingStart' field.
   * @param value the value to set.
   */
  public void setDaylightSavingStart(java.lang.String value) {
    this.daylightSavingStart = value;
  }

  /**
   * Gets the value of the 'daylightSavingTime' field.
   * @return The value of the 'daylightSavingTime' field.
   */
  public java.lang.String getDaylightSavingTime() {
    return daylightSavingTime;
  }


  /**
   * Sets the value of the 'daylightSavingTime' field.
   * @param value the value to set.
   */
  public void setDaylightSavingTime(java.lang.String value) {
    this.daylightSavingTime = value;
  }

  /**
   * Gets the value of the 'description' field.
   * @return The value of the 'description' field.
   */
  public java.lang.String getDescription() {
    return description;
  }


  /**
   * Sets the value of the 'description' field.
   * @param value the value to set.
   */
  public void setDescription(java.lang.String value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'dialingCode' field.
   * @return The value of the 'dialingCode' field.
   */
  public java.lang.String getDialingCode() {
    return dialingCode;
  }


  /**
   * Sets the value of the 'dialingCode' field.
   * @param value the value to set.
   */
  public void setDialingCode(java.lang.String value) {
    this.dialingCode = value;
  }

  /**
   * Gets the value of the 'dialingCodeDescription' field.
   * @return The value of the 'dialingCodeDescription' field.
   */
  public java.lang.String getDialingCodeDescription() {
    return dialingCodeDescription;
  }


  /**
   * Sets the value of the 'dialingCodeDescription' field.
   * @param value the value to set.
   */
  public void setDialingCodeDescription(java.lang.String value) {
    this.dialingCodeDescription = value;
  }

  /**
   * Gets the value of the 'geoType' field.
   * @return The value of the 'geoType' field.
   */
  public java.lang.String getGeoType() {
    return geoType;
  }


  /**
   * Sets the value of the 'geoType' field.
   * @param value the value to set.
   */
  public void setGeoType(java.lang.String value) {
    this.geoType = value;
  }

  /**
   * Gets the value of the 'hsudName' field.
   * @return The value of the 'hsudName' field.
   */
  public java.lang.String getHsudName() {
    return hsudName;
  }


  /**
   * Sets the value of the 'hsudName' field.
   * @param value the value to set.
   */
  public void setHsudName(java.lang.String value) {
    this.hsudName = value;
  }

  /**
   * Gets the value of the 'isMaerskCity' field.
   * @return The value of the 'isMaerskCity' field.
   */
  public java.lang.Boolean getIsMaerskCity() {
    return isMaerskCity;
  }


  /**
   * Sets the value of the 'isMaerskCity' field.
   * @param value the value to set.
   */
  public void setIsMaerskCity(java.lang.Boolean value) {
    this.isMaerskCity = value;
  }

  /**
   * Gets the value of the 'latitude' field.
   * @return The value of the 'latitude' field.
   */
  public java.lang.String getLatitude() {
    return latitude;
  }


  /**
   * Sets the value of the 'latitude' field.
   * @param value the value to set.
   */
  public void setLatitude(java.lang.String value) {
    this.latitude = value;
  }

  /**
   * Gets the value of the 'locationId' field.
   * @return The value of the 'locationId' field.
   */
  public java.lang.String getLocationId() {
    return locationId;
  }


  /**
   * Sets the value of the 'locationId' field.
   * @param value the value to set.
   */
  public void setLocationId(java.lang.String value) {
    this.locationId = value;
  }

  /**
   * Gets the value of the 'longitude' field.
   * @return The value of the 'longitude' field.
   */
  public java.lang.String getLongitude() {
    return longitude;
  }


  /**
   * Sets the value of the 'longitude' field.
   * @param value the value to set.
   */
  public void setLongitude(java.lang.String value) {
    this.longitude = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.String getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.String value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'olsonTimezone' field.
   * @return The value of the 'olsonTimezone' field.
   */
  public java.lang.String getOlsonTimezone() {
    return olsonTimezone;
  }


  /**
   * Sets the value of the 'olsonTimezone' field.
   * @param value the value to set.
   */
  public void setOlsonTimezone(java.lang.String value) {
    this.olsonTimezone = value;
  }

  /**
   * Gets the value of the 'parents' field.
   * @return The value of the 'parents' field.
   */
  public java.util.List<ParentAvro> getParents() {
    return parents;
  }


  /**
   * Sets the value of the 'parents' field.
   * @param value the value to set.
   */
  public void setParents(java.util.List<ParentAvro> value) {
    this.parents = value;
  }

  /**
   * Gets the value of the 'portFlag' field.
   * @return The value of the 'portFlag' field.
   */
  public java.lang.Boolean getPortFlag() {
    return portFlag;
  }


  /**
   * Sets the value of the 'portFlag' field.
   * @param value the value to set.
   */
  public void setPortFlag(java.lang.Boolean value) {
    this.portFlag = value;
  }

  /**
   * Gets the value of the 'postalCodeMandatory' field.
   * @return The value of the 'postalCodeMandatory' field.
   */
  public java.lang.Boolean getPostalCodeMandatory() {
    return postalCodeMandatory;
  }


  /**
   * Sets the value of the 'postalCodeMandatory' field.
   * @param value the value to set.
   */
  public void setPostalCodeMandatory(java.lang.Boolean value) {
    this.postalCodeMandatory = value;
  }

  /**
   * Gets the value of the 'restricted' field.
   * @return The value of the 'restricted' field.
   */
  public java.lang.String getRestricted() {
    return restricted;
  }


  /**
   * Sets the value of the 'restricted' field.
   * @param value the value to set.
   */
  public void setRestricted(java.lang.String value) {
    this.restricted = value;
  }

  /**
   * Gets the value of the 'stateProvinceMandatory' field.
   * @return The value of the 'stateProvinceMandatory' field.
   */
  public java.lang.Boolean getStateProvinceMandatory() {
    return stateProvinceMandatory;
  }


  /**
   * Sets the value of the 'stateProvinceMandatory' field.
   * @param value the value to set.
   */
  public void setStateProvinceMandatory(java.lang.Boolean value) {
    this.stateProvinceMandatory = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return The value of the 'status' field.
   */
  public java.lang.String getStatus() {
    return status;
  }


  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(java.lang.String value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'subCityParents' field.
   * @return The value of the 'subCityParents' field.
   */
  public java.util.List<java.lang.String> getSubCityParents() {
    return subCityParents;
  }


  /**
   * Sets the value of the 'subCityParents' field.
   * @param value the value to set.
   */
  public void setSubCityParents(java.util.List<java.lang.String> value) {
    this.subCityParents = value;
  }

  /**
   * Gets the value of the 'timeZone' field.
   * @return The value of the 'timeZone' field.
   */
  public java.lang.String getTimeZone() {
    return timeZone;
  }


  /**
   * Sets the value of the 'timeZone' field.
   * @param value the value to set.
   */
  public void setTimeZone(java.lang.String value) {
    this.timeZone = value;
  }

  /**
   * Gets the value of the 'utcOffsetMinutes' field.
   * @return The value of the 'utcOffsetMinutes' field.
   */
  public java.lang.Integer getUtcOffsetMinutes() {
    return utcOffsetMinutes;
  }


  /**
   * Sets the value of the 'utcOffsetMinutes' field.
   * @param value the value to set.
   */
  public void setUtcOffsetMinutes(java.lang.Integer value) {
    this.utcOffsetMinutes = value;
  }

  /**
   * Gets the value of the 'validFrom' field.
   * @return The value of the 'validFrom' field.
   */
  public java.lang.String getValidFrom() {
    return validFrom;
  }


  /**
   * Sets the value of the 'validFrom' field.
   * @param value the value to set.
   */
  public void setValidFrom(java.lang.String value) {
    this.validFrom = value;
  }

  /**
   * Gets the value of the 'validTo' field.
   * @return The value of the 'validTo' field.
   */
  public java.lang.String getValidTo() {
    return validTo;
  }


  /**
   * Sets the value of the 'validTo' field.
   * @param value the value to set.
   */
  public void setValidTo(java.lang.String value) {
    this.validTo = value;
  }

  /**
   * Gets the value of the 'workaroundReason' field.
   * @return The value of the 'workaroundReason' field.
   */
  public java.lang.String getWorkaroundReason() {
    return workaroundReason;
  }


  /**
   * Sets the value of the 'workaroundReason' field.
   * @param value the value to set.
   */
  public void setWorkaroundReason(java.lang.String value) {
    this.workaroundReason = value;
  }

  /**
   * Creates a new RequestCity RecordBuilder.
   * @return A new RequestCity RecordBuilder
   */
  public static RequestCity.Builder newBuilder() {
    return new RequestCity.Builder();
  }

  /**
   * Creates a new RequestCity RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new RequestCity RecordBuilder
   */
  public static RequestCity.Builder newBuilder(RequestCity.Builder other) {
    if (other == null) {
      return new RequestCity.Builder();
    } else {
      return new RequestCity.Builder(other);
    }
  }

  /**
   * Creates a new RequestCity RecordBuilder by copying an existing RequestCity instance.
   * @param other The existing instance to copy.
   * @return A new RequestCity RecordBuilder
   */
  public static RequestCity.Builder newBuilder(RequestCity other) {
    if (other == null) {
      return new RequestCity.Builder();
    } else {
      return new RequestCity.Builder(other);
    }
  }

  /**
   * RecordBuilder for RequestCity instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RequestCity>
    implements org.apache.avro.data.RecordBuilder<RequestCity> {

    private java.util.List<AlternateCodeAvro> alternateCodes;
    private java.util.List<java.lang.String> alternateNames;
    private java.lang.String bdaLocations;
    private java.lang.String bdaType;
    private java.util.List<BdaAvro> bdas;
    private CountryAvro country;
    private CountryAvro.Builder countryBuilder;
    private java.lang.String daylightSavingEnd;
    private java.lang.Integer daylightSavingShiftMinutes;
    private java.lang.String daylightSavingStart;
    private java.lang.String daylightSavingTime;
    private java.lang.String description;
    private java.lang.String dialingCode;
    private java.lang.String dialingCodeDescription;
    private java.lang.String geoType;
    private java.lang.String hsudName;
    private java.lang.Boolean isMaerskCity;
    private java.lang.String latitude;
    private java.lang.String locationId;
    private java.lang.String longitude;
    private java.lang.String name;
    private java.lang.String olsonTimezone;
    private java.util.List<ParentAvro> parents;
    private java.lang.Boolean portFlag;
    private java.lang.Boolean postalCodeMandatory;
    private java.lang.String restricted;
    private java.lang.Boolean stateProvinceMandatory;
    private java.lang.String status;
    private java.util.List<java.lang.String> subCityParents;
    private java.lang.String timeZone;
    private java.lang.Integer utcOffsetMinutes;
    private java.lang.String validFrom;
    private java.lang.String validTo;
    private java.lang.String workaroundReason;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(RequestCity.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.alternateCodes)) {
        this.alternateCodes = data().deepCopy(fields()[0].schema(), other.alternateCodes);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.alternateNames)) {
        this.alternateNames = data().deepCopy(fields()[1].schema(), other.alternateNames);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.bdaLocations)) {
        this.bdaLocations = data().deepCopy(fields()[2].schema(), other.bdaLocations);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.bdaType)) {
        this.bdaType = data().deepCopy(fields()[3].schema(), other.bdaType);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.bdas)) {
        this.bdas = data().deepCopy(fields()[4].schema(), other.bdas);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.country)) {
        this.country = data().deepCopy(fields()[5].schema(), other.country);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (other.hasCountryBuilder()) {
        this.countryBuilder = CountryAvro.newBuilder(other.getCountryBuilder());
      }
      if (isValidValue(fields()[6], other.daylightSavingEnd)) {
        this.daylightSavingEnd = data().deepCopy(fields()[6].schema(), other.daylightSavingEnd);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.daylightSavingShiftMinutes)) {
        this.daylightSavingShiftMinutes = data().deepCopy(fields()[7].schema(), other.daylightSavingShiftMinutes);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.daylightSavingStart)) {
        this.daylightSavingStart = data().deepCopy(fields()[8].schema(), other.daylightSavingStart);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.daylightSavingTime)) {
        this.daylightSavingTime = data().deepCopy(fields()[9].schema(), other.daylightSavingTime);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.description)) {
        this.description = data().deepCopy(fields()[10].schema(), other.description);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.dialingCode)) {
        this.dialingCode = data().deepCopy(fields()[11].schema(), other.dialingCode);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.dialingCodeDescription)) {
        this.dialingCodeDescription = data().deepCopy(fields()[12].schema(), other.dialingCodeDescription);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.geoType)) {
        this.geoType = data().deepCopy(fields()[13].schema(), other.geoType);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (isValidValue(fields()[14], other.hsudName)) {
        this.hsudName = data().deepCopy(fields()[14].schema(), other.hsudName);
        fieldSetFlags()[14] = other.fieldSetFlags()[14];
      }
      if (isValidValue(fields()[15], other.isMaerskCity)) {
        this.isMaerskCity = data().deepCopy(fields()[15].schema(), other.isMaerskCity);
        fieldSetFlags()[15] = other.fieldSetFlags()[15];
      }
      if (isValidValue(fields()[16], other.latitude)) {
        this.latitude = data().deepCopy(fields()[16].schema(), other.latitude);
        fieldSetFlags()[16] = other.fieldSetFlags()[16];
      }
      if (isValidValue(fields()[17], other.locationId)) {
        this.locationId = data().deepCopy(fields()[17].schema(), other.locationId);
        fieldSetFlags()[17] = other.fieldSetFlags()[17];
      }
      if (isValidValue(fields()[18], other.longitude)) {
        this.longitude = data().deepCopy(fields()[18].schema(), other.longitude);
        fieldSetFlags()[18] = other.fieldSetFlags()[18];
      }
      if (isValidValue(fields()[19], other.name)) {
        this.name = data().deepCopy(fields()[19].schema(), other.name);
        fieldSetFlags()[19] = other.fieldSetFlags()[19];
      }
      if (isValidValue(fields()[20], other.olsonTimezone)) {
        this.olsonTimezone = data().deepCopy(fields()[20].schema(), other.olsonTimezone);
        fieldSetFlags()[20] = other.fieldSetFlags()[20];
      }
      if (isValidValue(fields()[21], other.parents)) {
        this.parents = data().deepCopy(fields()[21].schema(), other.parents);
        fieldSetFlags()[21] = other.fieldSetFlags()[21];
      }
      if (isValidValue(fields()[22], other.portFlag)) {
        this.portFlag = data().deepCopy(fields()[22].schema(), other.portFlag);
        fieldSetFlags()[22] = other.fieldSetFlags()[22];
      }
      if (isValidValue(fields()[23], other.postalCodeMandatory)) {
        this.postalCodeMandatory = data().deepCopy(fields()[23].schema(), other.postalCodeMandatory);
        fieldSetFlags()[23] = other.fieldSetFlags()[23];
      }
      if (isValidValue(fields()[24], other.restricted)) {
        this.restricted = data().deepCopy(fields()[24].schema(), other.restricted);
        fieldSetFlags()[24] = other.fieldSetFlags()[24];
      }
      if (isValidValue(fields()[25], other.stateProvinceMandatory)) {
        this.stateProvinceMandatory = data().deepCopy(fields()[25].schema(), other.stateProvinceMandatory);
        fieldSetFlags()[25] = other.fieldSetFlags()[25];
      }
      if (isValidValue(fields()[26], other.status)) {
        this.status = data().deepCopy(fields()[26].schema(), other.status);
        fieldSetFlags()[26] = other.fieldSetFlags()[26];
      }
      if (isValidValue(fields()[27], other.subCityParents)) {
        this.subCityParents = data().deepCopy(fields()[27].schema(), other.subCityParents);
        fieldSetFlags()[27] = other.fieldSetFlags()[27];
      }
      if (isValidValue(fields()[28], other.timeZone)) {
        this.timeZone = data().deepCopy(fields()[28].schema(), other.timeZone);
        fieldSetFlags()[28] = other.fieldSetFlags()[28];
      }
      if (isValidValue(fields()[29], other.utcOffsetMinutes)) {
        this.utcOffsetMinutes = data().deepCopy(fields()[29].schema(), other.utcOffsetMinutes);
        fieldSetFlags()[29] = other.fieldSetFlags()[29];
      }
      if (isValidValue(fields()[30], other.validFrom)) {
        this.validFrom = data().deepCopy(fields()[30].schema(), other.validFrom);
        fieldSetFlags()[30] = other.fieldSetFlags()[30];
      }
      if (isValidValue(fields()[31], other.validTo)) {
        this.validTo = data().deepCopy(fields()[31].schema(), other.validTo);
        fieldSetFlags()[31] = other.fieldSetFlags()[31];
      }
      if (isValidValue(fields()[32], other.workaroundReason)) {
        this.workaroundReason = data().deepCopy(fields()[32].schema(), other.workaroundReason);
        fieldSetFlags()[32] = other.fieldSetFlags()[32];
      }
    }

    /**
     * Creates a Builder by copying an existing RequestCity instance
     * @param other The existing instance to copy.
     */
    private Builder(RequestCity other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.alternateCodes)) {
        this.alternateCodes = data().deepCopy(fields()[0].schema(), other.alternateCodes);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.alternateNames)) {
        this.alternateNames = data().deepCopy(fields()[1].schema(), other.alternateNames);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.bdaLocations)) {
        this.bdaLocations = data().deepCopy(fields()[2].schema(), other.bdaLocations);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.bdaType)) {
        this.bdaType = data().deepCopy(fields()[3].schema(), other.bdaType);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.bdas)) {
        this.bdas = data().deepCopy(fields()[4].schema(), other.bdas);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.country)) {
        this.country = data().deepCopy(fields()[5].schema(), other.country);
        fieldSetFlags()[5] = true;
      }
      this.countryBuilder = null;
      if (isValidValue(fields()[6], other.daylightSavingEnd)) {
        this.daylightSavingEnd = data().deepCopy(fields()[6].schema(), other.daylightSavingEnd);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.daylightSavingShiftMinutes)) {
        this.daylightSavingShiftMinutes = data().deepCopy(fields()[7].schema(), other.daylightSavingShiftMinutes);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.daylightSavingStart)) {
        this.daylightSavingStart = data().deepCopy(fields()[8].schema(), other.daylightSavingStart);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.daylightSavingTime)) {
        this.daylightSavingTime = data().deepCopy(fields()[9].schema(), other.daylightSavingTime);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.description)) {
        this.description = data().deepCopy(fields()[10].schema(), other.description);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.dialingCode)) {
        this.dialingCode = data().deepCopy(fields()[11].schema(), other.dialingCode);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.dialingCodeDescription)) {
        this.dialingCodeDescription = data().deepCopy(fields()[12].schema(), other.dialingCodeDescription);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.geoType)) {
        this.geoType = data().deepCopy(fields()[13].schema(), other.geoType);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.hsudName)) {
        this.hsudName = data().deepCopy(fields()[14].schema(), other.hsudName);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.isMaerskCity)) {
        this.isMaerskCity = data().deepCopy(fields()[15].schema(), other.isMaerskCity);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.latitude)) {
        this.latitude = data().deepCopy(fields()[16].schema(), other.latitude);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.locationId)) {
        this.locationId = data().deepCopy(fields()[17].schema(), other.locationId);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.longitude)) {
        this.longitude = data().deepCopy(fields()[18].schema(), other.longitude);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.name)) {
        this.name = data().deepCopy(fields()[19].schema(), other.name);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.olsonTimezone)) {
        this.olsonTimezone = data().deepCopy(fields()[20].schema(), other.olsonTimezone);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.parents)) {
        this.parents = data().deepCopy(fields()[21].schema(), other.parents);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.portFlag)) {
        this.portFlag = data().deepCopy(fields()[22].schema(), other.portFlag);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.postalCodeMandatory)) {
        this.postalCodeMandatory = data().deepCopy(fields()[23].schema(), other.postalCodeMandatory);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.restricted)) {
        this.restricted = data().deepCopy(fields()[24].schema(), other.restricted);
        fieldSetFlags()[24] = true;
      }
      if (isValidValue(fields()[25], other.stateProvinceMandatory)) {
        this.stateProvinceMandatory = data().deepCopy(fields()[25].schema(), other.stateProvinceMandatory);
        fieldSetFlags()[25] = true;
      }
      if (isValidValue(fields()[26], other.status)) {
        this.status = data().deepCopy(fields()[26].schema(), other.status);
        fieldSetFlags()[26] = true;
      }
      if (isValidValue(fields()[27], other.subCityParents)) {
        this.subCityParents = data().deepCopy(fields()[27].schema(), other.subCityParents);
        fieldSetFlags()[27] = true;
      }
      if (isValidValue(fields()[28], other.timeZone)) {
        this.timeZone = data().deepCopy(fields()[28].schema(), other.timeZone);
        fieldSetFlags()[28] = true;
      }
      if (isValidValue(fields()[29], other.utcOffsetMinutes)) {
        this.utcOffsetMinutes = data().deepCopy(fields()[29].schema(), other.utcOffsetMinutes);
        fieldSetFlags()[29] = true;
      }
      if (isValidValue(fields()[30], other.validFrom)) {
        this.validFrom = data().deepCopy(fields()[30].schema(), other.validFrom);
        fieldSetFlags()[30] = true;
      }
      if (isValidValue(fields()[31], other.validTo)) {
        this.validTo = data().deepCopy(fields()[31].schema(), other.validTo);
        fieldSetFlags()[31] = true;
      }
      if (isValidValue(fields()[32], other.workaroundReason)) {
        this.workaroundReason = data().deepCopy(fields()[32].schema(), other.workaroundReason);
        fieldSetFlags()[32] = true;
      }
    }

    /**
      * Gets the value of the 'alternateCodes' field.
      * @return The value.
      */
    public java.util.List<AlternateCodeAvro> getAlternateCodes() {
      return alternateCodes;
    }


    /**
      * Sets the value of the 'alternateCodes' field.
      * @param value The value of 'alternateCodes'.
      * @return This builder.
      */
    public RequestCity.Builder setAlternateCodes(java.util.List<AlternateCodeAvro> value) {
      validate(fields()[0], value);
      this.alternateCodes = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'alternateCodes' field has been set.
      * @return True if the 'alternateCodes' field has been set, false otherwise.
      */
    public boolean hasAlternateCodes() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'alternateCodes' field.
      * @return This builder.
      */
    public RequestCity.Builder clearAlternateCodes() {
      alternateCodes = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'alternateNames' field.
      * @return The value.
      */
    public java.util.List<java.lang.String> getAlternateNames() {
      return alternateNames;
    }


    /**
      * Sets the value of the 'alternateNames' field.
      * @param value The value of 'alternateNames'.
      * @return This builder.
      */
    public RequestCity.Builder setAlternateNames(java.util.List<java.lang.String> value) {
      validate(fields()[1], value);
      this.alternateNames = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'alternateNames' field has been set.
      * @return True if the 'alternateNames' field has been set, false otherwise.
      */
    public boolean hasAlternateNames() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'alternateNames' field.
      * @return This builder.
      */
    public RequestCity.Builder clearAlternateNames() {
      alternateNames = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'bdaLocations' field.
      * @return The value.
      */
    public java.lang.String getBdaLocations() {
      return bdaLocations;
    }


    /**
      * Sets the value of the 'bdaLocations' field.
      * @param value The value of 'bdaLocations'.
      * @return This builder.
      */
    public RequestCity.Builder setBdaLocations(java.lang.String value) {
      validate(fields()[2], value);
      this.bdaLocations = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'bdaLocations' field has been set.
      * @return True if the 'bdaLocations' field has been set, false otherwise.
      */
    public boolean hasBdaLocations() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'bdaLocations' field.
      * @return This builder.
      */
    public RequestCity.Builder clearBdaLocations() {
      bdaLocations = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'bdaType' field.
      * @return The value.
      */
    public java.lang.String getBdaType() {
      return bdaType;
    }


    /**
      * Sets the value of the 'bdaType' field.
      * @param value The value of 'bdaType'.
      * @return This builder.
      */
    public RequestCity.Builder setBdaType(java.lang.String value) {
      validate(fields()[3], value);
      this.bdaType = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'bdaType' field has been set.
      * @return True if the 'bdaType' field has been set, false otherwise.
      */
    public boolean hasBdaType() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'bdaType' field.
      * @return This builder.
      */
    public RequestCity.Builder clearBdaType() {
      bdaType = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'bdas' field.
      * @return The value.
      */
    public java.util.List<BdaAvro> getBdas() {
      return bdas;
    }


    /**
      * Sets the value of the 'bdas' field.
      * @param value The value of 'bdas'.
      * @return This builder.
      */
    public RequestCity.Builder setBdas(java.util.List<BdaAvro> value) {
      validate(fields()[4], value);
      this.bdas = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'bdas' field has been set.
      * @return True if the 'bdas' field has been set, false otherwise.
      */
    public boolean hasBdas() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'bdas' field.
      * @return This builder.
      */
    public RequestCity.Builder clearBdas() {
      bdas = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'country' field.
      * @return The value.
      */
    public CountryAvro getCountry() {
      return country;
    }


    /**
      * Sets the value of the 'country' field.
      * @param value The value of 'country'.
      * @return This builder.
      */
    public RequestCity.Builder setCountry(CountryAvro value) {
      validate(fields()[5], value);
      this.countryBuilder = null;
      this.country = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'country' field has been set.
      * @return True if the 'country' field has been set, false otherwise.
      */
    public boolean hasCountry() {
      return fieldSetFlags()[5];
    }

    /**
     * Gets the Builder instance for the 'country' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public CountryAvro.Builder getCountryBuilder() {
      if (countryBuilder == null) {
        if (hasCountry()) {
          setCountryBuilder(CountryAvro.newBuilder(country));
        } else {
          setCountryBuilder(CountryAvro.newBuilder());
        }
      }
      return countryBuilder;
    }

    /**
     * Sets the Builder instance for the 'country' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public RequestCity.Builder setCountryBuilder(CountryAvro.Builder value) {
      clearCountry();
      countryBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'country' field has an active Builder instance
     * @return True if the 'country' field has an active Builder instance
     */
    public boolean hasCountryBuilder() {
      return countryBuilder != null;
    }

    /**
      * Clears the value of the 'country' field.
      * @return This builder.
      */
    public RequestCity.Builder clearCountry() {
      country = null;
      countryBuilder = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'daylightSavingEnd' field.
      * @return The value.
      */
    public java.lang.String getDaylightSavingEnd() {
      return daylightSavingEnd;
    }


    /**
      * Sets the value of the 'daylightSavingEnd' field.
      * @param value The value of 'daylightSavingEnd'.
      * @return This builder.
      */
    public RequestCity.Builder setDaylightSavingEnd(java.lang.String value) {
      validate(fields()[6], value);
      this.daylightSavingEnd = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'daylightSavingEnd' field has been set.
      * @return True if the 'daylightSavingEnd' field has been set, false otherwise.
      */
    public boolean hasDaylightSavingEnd() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'daylightSavingEnd' field.
      * @return This builder.
      */
    public RequestCity.Builder clearDaylightSavingEnd() {
      daylightSavingEnd = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'daylightSavingShiftMinutes' field.
      * @return The value.
      */
    public java.lang.Integer getDaylightSavingShiftMinutes() {
      return daylightSavingShiftMinutes;
    }


    /**
      * Sets the value of the 'daylightSavingShiftMinutes' field.
      * @param value The value of 'daylightSavingShiftMinutes'.
      * @return This builder.
      */
    public RequestCity.Builder setDaylightSavingShiftMinutes(java.lang.Integer value) {
      validate(fields()[7], value);
      this.daylightSavingShiftMinutes = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'daylightSavingShiftMinutes' field has been set.
      * @return True if the 'daylightSavingShiftMinutes' field has been set, false otherwise.
      */
    public boolean hasDaylightSavingShiftMinutes() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'daylightSavingShiftMinutes' field.
      * @return This builder.
      */
    public RequestCity.Builder clearDaylightSavingShiftMinutes() {
      daylightSavingShiftMinutes = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'daylightSavingStart' field.
      * @return The value.
      */
    public java.lang.String getDaylightSavingStart() {
      return daylightSavingStart;
    }


    /**
      * Sets the value of the 'daylightSavingStart' field.
      * @param value The value of 'daylightSavingStart'.
      * @return This builder.
      */
    public RequestCity.Builder setDaylightSavingStart(java.lang.String value) {
      validate(fields()[8], value);
      this.daylightSavingStart = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'daylightSavingStart' field has been set.
      * @return True if the 'daylightSavingStart' field has been set, false otherwise.
      */
    public boolean hasDaylightSavingStart() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'daylightSavingStart' field.
      * @return This builder.
      */
    public RequestCity.Builder clearDaylightSavingStart() {
      daylightSavingStart = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'daylightSavingTime' field.
      * @return The value.
      */
    public java.lang.String getDaylightSavingTime() {
      return daylightSavingTime;
    }


    /**
      * Sets the value of the 'daylightSavingTime' field.
      * @param value The value of 'daylightSavingTime'.
      * @return This builder.
      */
    public RequestCity.Builder setDaylightSavingTime(java.lang.String value) {
      validate(fields()[9], value);
      this.daylightSavingTime = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'daylightSavingTime' field has been set.
      * @return True if the 'daylightSavingTime' field has been set, false otherwise.
      */
    public boolean hasDaylightSavingTime() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'daylightSavingTime' field.
      * @return This builder.
      */
    public RequestCity.Builder clearDaylightSavingTime() {
      daylightSavingTime = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'description' field.
      * @return The value.
      */
    public java.lang.String getDescription() {
      return description;
    }


    /**
      * Sets the value of the 'description' field.
      * @param value The value of 'description'.
      * @return This builder.
      */
    public RequestCity.Builder setDescription(java.lang.String value) {
      validate(fields()[10], value);
      this.description = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'description' field has been set.
      * @return True if the 'description' field has been set, false otherwise.
      */
    public boolean hasDescription() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'description' field.
      * @return This builder.
      */
    public RequestCity.Builder clearDescription() {
      description = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'dialingCode' field.
      * @return The value.
      */
    public java.lang.String getDialingCode() {
      return dialingCode;
    }


    /**
      * Sets the value of the 'dialingCode' field.
      * @param value The value of 'dialingCode'.
      * @return This builder.
      */
    public RequestCity.Builder setDialingCode(java.lang.String value) {
      validate(fields()[11], value);
      this.dialingCode = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'dialingCode' field has been set.
      * @return True if the 'dialingCode' field has been set, false otherwise.
      */
    public boolean hasDialingCode() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'dialingCode' field.
      * @return This builder.
      */
    public RequestCity.Builder clearDialingCode() {
      dialingCode = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'dialingCodeDescription' field.
      * @return The value.
      */
    public java.lang.String getDialingCodeDescription() {
      return dialingCodeDescription;
    }


    /**
      * Sets the value of the 'dialingCodeDescription' field.
      * @param value The value of 'dialingCodeDescription'.
      * @return This builder.
      */
    public RequestCity.Builder setDialingCodeDescription(java.lang.String value) {
      validate(fields()[12], value);
      this.dialingCodeDescription = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'dialingCodeDescription' field has been set.
      * @return True if the 'dialingCodeDescription' field has been set, false otherwise.
      */
    public boolean hasDialingCodeDescription() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'dialingCodeDescription' field.
      * @return This builder.
      */
    public RequestCity.Builder clearDialingCodeDescription() {
      dialingCodeDescription = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'geoType' field.
      * @return The value.
      */
    public java.lang.String getGeoType() {
      return geoType;
    }


    /**
      * Sets the value of the 'geoType' field.
      * @param value The value of 'geoType'.
      * @return This builder.
      */
    public RequestCity.Builder setGeoType(java.lang.String value) {
      validate(fields()[13], value);
      this.geoType = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'geoType' field has been set.
      * @return True if the 'geoType' field has been set, false otherwise.
      */
    public boolean hasGeoType() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'geoType' field.
      * @return This builder.
      */
    public RequestCity.Builder clearGeoType() {
      geoType = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'hsudName' field.
      * @return The value.
      */
    public java.lang.String getHsudName() {
      return hsudName;
    }


    /**
      * Sets the value of the 'hsudName' field.
      * @param value The value of 'hsudName'.
      * @return This builder.
      */
    public RequestCity.Builder setHsudName(java.lang.String value) {
      validate(fields()[14], value);
      this.hsudName = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'hsudName' field has been set.
      * @return True if the 'hsudName' field has been set, false otherwise.
      */
    public boolean hasHsudName() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'hsudName' field.
      * @return This builder.
      */
    public RequestCity.Builder clearHsudName() {
      hsudName = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'isMaerskCity' field.
      * @return The value.
      */
    public java.lang.Boolean getIsMaerskCity() {
      return isMaerskCity;
    }


    /**
      * Sets the value of the 'isMaerskCity' field.
      * @param value The value of 'isMaerskCity'.
      * @return This builder.
      */
    public RequestCity.Builder setIsMaerskCity(java.lang.Boolean value) {
      validate(fields()[15], value);
      this.isMaerskCity = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'isMaerskCity' field has been set.
      * @return True if the 'isMaerskCity' field has been set, false otherwise.
      */
    public boolean hasIsMaerskCity() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'isMaerskCity' field.
      * @return This builder.
      */
    public RequestCity.Builder clearIsMaerskCity() {
      isMaerskCity = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'latitude' field.
      * @return The value.
      */
    public java.lang.String getLatitude() {
      return latitude;
    }


    /**
      * Sets the value of the 'latitude' field.
      * @param value The value of 'latitude'.
      * @return This builder.
      */
    public RequestCity.Builder setLatitude(java.lang.String value) {
      validate(fields()[16], value);
      this.latitude = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'latitude' field has been set.
      * @return True if the 'latitude' field has been set, false otherwise.
      */
    public boolean hasLatitude() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'latitude' field.
      * @return This builder.
      */
    public RequestCity.Builder clearLatitude() {
      latitude = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'locationId' field.
      * @return The value.
      */
    public java.lang.String getLocationId() {
      return locationId;
    }


    /**
      * Sets the value of the 'locationId' field.
      * @param value The value of 'locationId'.
      * @return This builder.
      */
    public RequestCity.Builder setLocationId(java.lang.String value) {
      validate(fields()[17], value);
      this.locationId = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'locationId' field has been set.
      * @return True if the 'locationId' field has been set, false otherwise.
      */
    public boolean hasLocationId() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'locationId' field.
      * @return This builder.
      */
    public RequestCity.Builder clearLocationId() {
      locationId = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'longitude' field.
      * @return The value.
      */
    public java.lang.String getLongitude() {
      return longitude;
    }


    /**
      * Sets the value of the 'longitude' field.
      * @param value The value of 'longitude'.
      * @return This builder.
      */
    public RequestCity.Builder setLongitude(java.lang.String value) {
      validate(fields()[18], value);
      this.longitude = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'longitude' field has been set.
      * @return True if the 'longitude' field has been set, false otherwise.
      */
    public boolean hasLongitude() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'longitude' field.
      * @return This builder.
      */
    public RequestCity.Builder clearLongitude() {
      longitude = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.String getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public RequestCity.Builder setName(java.lang.String value) {
      validate(fields()[19], value);
      this.name = value;
      fieldSetFlags()[19] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[19];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public RequestCity.Builder clearName() {
      name = null;
      fieldSetFlags()[19] = false;
      return this;
    }

    /**
      * Gets the value of the 'olsonTimezone' field.
      * @return The value.
      */
    public java.lang.String getOlsonTimezone() {
      return olsonTimezone;
    }


    /**
      * Sets the value of the 'olsonTimezone' field.
      * @param value The value of 'olsonTimezone'.
      * @return This builder.
      */
    public RequestCity.Builder setOlsonTimezone(java.lang.String value) {
      validate(fields()[20], value);
      this.olsonTimezone = value;
      fieldSetFlags()[20] = true;
      return this;
    }

    /**
      * Checks whether the 'olsonTimezone' field has been set.
      * @return True if the 'olsonTimezone' field has been set, false otherwise.
      */
    public boolean hasOlsonTimezone() {
      return fieldSetFlags()[20];
    }


    /**
      * Clears the value of the 'olsonTimezone' field.
      * @return This builder.
      */
    public RequestCity.Builder clearOlsonTimezone() {
      olsonTimezone = null;
      fieldSetFlags()[20] = false;
      return this;
    }

    /**
      * Gets the value of the 'parents' field.
      * @return The value.
      */
    public java.util.List<ParentAvro> getParents() {
      return parents;
    }


    /**
      * Sets the value of the 'parents' field.
      * @param value The value of 'parents'.
      * @return This builder.
      */
    public RequestCity.Builder setParents(java.util.List<ParentAvro> value) {
      validate(fields()[21], value);
      this.parents = value;
      fieldSetFlags()[21] = true;
      return this;
    }

    /**
      * Checks whether the 'parents' field has been set.
      * @return True if the 'parents' field has been set, false otherwise.
      */
    public boolean hasParents() {
      return fieldSetFlags()[21];
    }


    /**
      * Clears the value of the 'parents' field.
      * @return This builder.
      */
    public RequestCity.Builder clearParents() {
      parents = null;
      fieldSetFlags()[21] = false;
      return this;
    }

    /**
      * Gets the value of the 'portFlag' field.
      * @return The value.
      */
    public java.lang.Boolean getPortFlag() {
      return portFlag;
    }


    /**
      * Sets the value of the 'portFlag' field.
      * @param value The value of 'portFlag'.
      * @return This builder.
      */
    public RequestCity.Builder setPortFlag(java.lang.Boolean value) {
      validate(fields()[22], value);
      this.portFlag = value;
      fieldSetFlags()[22] = true;
      return this;
    }

    /**
      * Checks whether the 'portFlag' field has been set.
      * @return True if the 'portFlag' field has been set, false otherwise.
      */
    public boolean hasPortFlag() {
      return fieldSetFlags()[22];
    }


    /**
      * Clears the value of the 'portFlag' field.
      * @return This builder.
      */
    public RequestCity.Builder clearPortFlag() {
      portFlag = null;
      fieldSetFlags()[22] = false;
      return this;
    }

    /**
      * Gets the value of the 'postalCodeMandatory' field.
      * @return The value.
      */
    public java.lang.Boolean getPostalCodeMandatory() {
      return postalCodeMandatory;
    }


    /**
      * Sets the value of the 'postalCodeMandatory' field.
      * @param value The value of 'postalCodeMandatory'.
      * @return This builder.
      */
    public RequestCity.Builder setPostalCodeMandatory(java.lang.Boolean value) {
      validate(fields()[23], value);
      this.postalCodeMandatory = value;
      fieldSetFlags()[23] = true;
      return this;
    }

    /**
      * Checks whether the 'postalCodeMandatory' field has been set.
      * @return True if the 'postalCodeMandatory' field has been set, false otherwise.
      */
    public boolean hasPostalCodeMandatory() {
      return fieldSetFlags()[23];
    }


    /**
      * Clears the value of the 'postalCodeMandatory' field.
      * @return This builder.
      */
    public RequestCity.Builder clearPostalCodeMandatory() {
      postalCodeMandatory = null;
      fieldSetFlags()[23] = false;
      return this;
    }

    /**
      * Gets the value of the 'restricted' field.
      * @return The value.
      */
    public java.lang.String getRestricted() {
      return restricted;
    }


    /**
      * Sets the value of the 'restricted' field.
      * @param value The value of 'restricted'.
      * @return This builder.
      */
    public RequestCity.Builder setRestricted(java.lang.String value) {
      validate(fields()[24], value);
      this.restricted = value;
      fieldSetFlags()[24] = true;
      return this;
    }

    /**
      * Checks whether the 'restricted' field has been set.
      * @return True if the 'restricted' field has been set, false otherwise.
      */
    public boolean hasRestricted() {
      return fieldSetFlags()[24];
    }


    /**
      * Clears the value of the 'restricted' field.
      * @return This builder.
      */
    public RequestCity.Builder clearRestricted() {
      restricted = null;
      fieldSetFlags()[24] = false;
      return this;
    }

    /**
      * Gets the value of the 'stateProvinceMandatory' field.
      * @return The value.
      */
    public java.lang.Boolean getStateProvinceMandatory() {
      return stateProvinceMandatory;
    }


    /**
      * Sets the value of the 'stateProvinceMandatory' field.
      * @param value The value of 'stateProvinceMandatory'.
      * @return This builder.
      */
    public RequestCity.Builder setStateProvinceMandatory(java.lang.Boolean value) {
      validate(fields()[25], value);
      this.stateProvinceMandatory = value;
      fieldSetFlags()[25] = true;
      return this;
    }

    /**
      * Checks whether the 'stateProvinceMandatory' field has been set.
      * @return True if the 'stateProvinceMandatory' field has been set, false otherwise.
      */
    public boolean hasStateProvinceMandatory() {
      return fieldSetFlags()[25];
    }


    /**
      * Clears the value of the 'stateProvinceMandatory' field.
      * @return This builder.
      */
    public RequestCity.Builder clearStateProvinceMandatory() {
      stateProvinceMandatory = null;
      fieldSetFlags()[25] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * @return The value.
      */
    public java.lang.String getStatus() {
      return status;
    }


    /**
      * Sets the value of the 'status' field.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public RequestCity.Builder setStatus(java.lang.String value) {
      validate(fields()[26], value);
      this.status = value;
      fieldSetFlags()[26] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[26];
    }


    /**
      * Clears the value of the 'status' field.
      * @return This builder.
      */
    public RequestCity.Builder clearStatus() {
      status = null;
      fieldSetFlags()[26] = false;
      return this;
    }

    /**
      * Gets the value of the 'subCityParents' field.
      * @return The value.
      */
    public java.util.List<java.lang.String> getSubCityParents() {
      return subCityParents;
    }


    /**
      * Sets the value of the 'subCityParents' field.
      * @param value The value of 'subCityParents'.
      * @return This builder.
      */
    public RequestCity.Builder setSubCityParents(java.util.List<java.lang.String> value) {
      validate(fields()[27], value);
      this.subCityParents = value;
      fieldSetFlags()[27] = true;
      return this;
    }

    /**
      * Checks whether the 'subCityParents' field has been set.
      * @return True if the 'subCityParents' field has been set, false otherwise.
      */
    public boolean hasSubCityParents() {
      return fieldSetFlags()[27];
    }


    /**
      * Clears the value of the 'subCityParents' field.
      * @return This builder.
      */
    public RequestCity.Builder clearSubCityParents() {
      subCityParents = null;
      fieldSetFlags()[27] = false;
      return this;
    }

    /**
      * Gets the value of the 'timeZone' field.
      * @return The value.
      */
    public java.lang.String getTimeZone() {
      return timeZone;
    }


    /**
      * Sets the value of the 'timeZone' field.
      * @param value The value of 'timeZone'.
      * @return This builder.
      */
    public RequestCity.Builder setTimeZone(java.lang.String value) {
      validate(fields()[28], value);
      this.timeZone = value;
      fieldSetFlags()[28] = true;
      return this;
    }

    /**
      * Checks whether the 'timeZone' field has been set.
      * @return True if the 'timeZone' field has been set, false otherwise.
      */
    public boolean hasTimeZone() {
      return fieldSetFlags()[28];
    }


    /**
      * Clears the value of the 'timeZone' field.
      * @return This builder.
      */
    public RequestCity.Builder clearTimeZone() {
      timeZone = null;
      fieldSetFlags()[28] = false;
      return this;
    }

    /**
      * Gets the value of the 'utcOffsetMinutes' field.
      * @return The value.
      */
    public java.lang.Integer getUtcOffsetMinutes() {
      return utcOffsetMinutes;
    }


    /**
      * Sets the value of the 'utcOffsetMinutes' field.
      * @param value The value of 'utcOffsetMinutes'.
      * @return This builder.
      */
    public RequestCity.Builder setUtcOffsetMinutes(java.lang.Integer value) {
      validate(fields()[29], value);
      this.utcOffsetMinutes = value;
      fieldSetFlags()[29] = true;
      return this;
    }

    /**
      * Checks whether the 'utcOffsetMinutes' field has been set.
      * @return True if the 'utcOffsetMinutes' field has been set, false otherwise.
      */
    public boolean hasUtcOffsetMinutes() {
      return fieldSetFlags()[29];
    }


    /**
      * Clears the value of the 'utcOffsetMinutes' field.
      * @return This builder.
      */
    public RequestCity.Builder clearUtcOffsetMinutes() {
      utcOffsetMinutes = null;
      fieldSetFlags()[29] = false;
      return this;
    }

    /**
      * Gets the value of the 'validFrom' field.
      * @return The value.
      */
    public java.lang.String getValidFrom() {
      return validFrom;
    }


    /**
      * Sets the value of the 'validFrom' field.
      * @param value The value of 'validFrom'.
      * @return This builder.
      */
    public RequestCity.Builder setValidFrom(java.lang.String value) {
      validate(fields()[30], value);
      this.validFrom = value;
      fieldSetFlags()[30] = true;
      return this;
    }

    /**
      * Checks whether the 'validFrom' field has been set.
      * @return True if the 'validFrom' field has been set, false otherwise.
      */
    public boolean hasValidFrom() {
      return fieldSetFlags()[30];
    }


    /**
      * Clears the value of the 'validFrom' field.
      * @return This builder.
      */
    public RequestCity.Builder clearValidFrom() {
      validFrom = null;
      fieldSetFlags()[30] = false;
      return this;
    }

    /**
      * Gets the value of the 'validTo' field.
      * @return The value.
      */
    public java.lang.String getValidTo() {
      return validTo;
    }


    /**
      * Sets the value of the 'validTo' field.
      * @param value The value of 'validTo'.
      * @return This builder.
      */
    public RequestCity.Builder setValidTo(java.lang.String value) {
      validate(fields()[31], value);
      this.validTo = value;
      fieldSetFlags()[31] = true;
      return this;
    }

    /**
      * Checks whether the 'validTo' field has been set.
      * @return True if the 'validTo' field has been set, false otherwise.
      */
    public boolean hasValidTo() {
      return fieldSetFlags()[31];
    }


    /**
      * Clears the value of the 'validTo' field.
      * @return This builder.
      */
    public RequestCity.Builder clearValidTo() {
      validTo = null;
      fieldSetFlags()[31] = false;
      return this;
    }

    /**
      * Gets the value of the 'workaroundReason' field.
      * @return The value.
      */
    public java.lang.String getWorkaroundReason() {
      return workaroundReason;
    }


    /**
      * Sets the value of the 'workaroundReason' field.
      * @param value The value of 'workaroundReason'.
      * @return This builder.
      */
    public RequestCity.Builder setWorkaroundReason(java.lang.String value) {
      validate(fields()[32], value);
      this.workaroundReason = value;
      fieldSetFlags()[32] = true;
      return this;
    }

    /**
      * Checks whether the 'workaroundReason' field has been set.
      * @return True if the 'workaroundReason' field has been set, false otherwise.
      */
    public boolean hasWorkaroundReason() {
      return fieldSetFlags()[32];
    }


    /**
      * Clears the value of the 'workaroundReason' field.
      * @return This builder.
      */
    public RequestCity.Builder clearWorkaroundReason() {
      workaroundReason = null;
      fieldSetFlags()[32] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public RequestCity build() {
      try {
        RequestCity record = new RequestCity();
        record.alternateCodes = fieldSetFlags()[0] ? this.alternateCodes : (java.util.List<AlternateCodeAvro>) defaultValue(fields()[0]);
        record.alternateNames = fieldSetFlags()[1] ? this.alternateNames : (java.util.List<java.lang.String>) defaultValue(fields()[1]);
        record.bdaLocations = fieldSetFlags()[2] ? this.bdaLocations : (java.lang.String) defaultValue(fields()[2]);
        record.bdaType = fieldSetFlags()[3] ? this.bdaType : (java.lang.String) defaultValue(fields()[3]);
        record.bdas = fieldSetFlags()[4] ? this.bdas : (java.util.List<BdaAvro>) defaultValue(fields()[4]);
        if (countryBuilder != null) {
          try {
            record.country = this.countryBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("country"));
            throw e;
          }
        } else {
          record.country = fieldSetFlags()[5] ? this.country : (CountryAvro) defaultValue(fields()[5]);
        }
        record.daylightSavingEnd = fieldSetFlags()[6] ? this.daylightSavingEnd : (java.lang.String) defaultValue(fields()[6]);
        record.daylightSavingShiftMinutes = fieldSetFlags()[7] ? this.daylightSavingShiftMinutes : (java.lang.Integer) defaultValue(fields()[7]);
        record.daylightSavingStart = fieldSetFlags()[8] ? this.daylightSavingStart : (java.lang.String) defaultValue(fields()[8]);
        record.daylightSavingTime = fieldSetFlags()[9] ? this.daylightSavingTime : (java.lang.String) defaultValue(fields()[9]);
        record.description = fieldSetFlags()[10] ? this.description : (java.lang.String) defaultValue(fields()[10]);
        record.dialingCode = fieldSetFlags()[11] ? this.dialingCode : (java.lang.String) defaultValue(fields()[11]);
        record.dialingCodeDescription = fieldSetFlags()[12] ? this.dialingCodeDescription : (java.lang.String) defaultValue(fields()[12]);
        record.geoType = fieldSetFlags()[13] ? this.geoType : (java.lang.String) defaultValue(fields()[13]);
        record.hsudName = fieldSetFlags()[14] ? this.hsudName : (java.lang.String) defaultValue(fields()[14]);
        record.isMaerskCity = fieldSetFlags()[15] ? this.isMaerskCity : (java.lang.Boolean) defaultValue(fields()[15]);
        record.latitude = fieldSetFlags()[16] ? this.latitude : (java.lang.String) defaultValue(fields()[16]);
        record.locationId = fieldSetFlags()[17] ? this.locationId : (java.lang.String) defaultValue(fields()[17]);
        record.longitude = fieldSetFlags()[18] ? this.longitude : (java.lang.String) defaultValue(fields()[18]);
        record.name = fieldSetFlags()[19] ? this.name : (java.lang.String) defaultValue(fields()[19]);
        record.olsonTimezone = fieldSetFlags()[20] ? this.olsonTimezone : (java.lang.String) defaultValue(fields()[20]);
        record.parents = fieldSetFlags()[21] ? this.parents : (java.util.List<ParentAvro>) defaultValue(fields()[21]);
        record.portFlag = fieldSetFlags()[22] ? this.portFlag : (java.lang.Boolean) defaultValue(fields()[22]);
        record.postalCodeMandatory = fieldSetFlags()[23] ? this.postalCodeMandatory : (java.lang.Boolean) defaultValue(fields()[23]);
        record.restricted = fieldSetFlags()[24] ? this.restricted : (java.lang.String) defaultValue(fields()[24]);
        record.stateProvinceMandatory = fieldSetFlags()[25] ? this.stateProvinceMandatory : (java.lang.Boolean) defaultValue(fields()[25]);
        record.status = fieldSetFlags()[26] ? this.status : (java.lang.String) defaultValue(fields()[26]);
        record.subCityParents = fieldSetFlags()[27] ? this.subCityParents : (java.util.List<java.lang.String>) defaultValue(fields()[27]);
        record.timeZone = fieldSetFlags()[28] ? this.timeZone : (java.lang.String) defaultValue(fields()[28]);
        record.utcOffsetMinutes = fieldSetFlags()[29] ? this.utcOffsetMinutes : (java.lang.Integer) defaultValue(fields()[29]);
        record.validFrom = fieldSetFlags()[30] ? this.validFrom : (java.lang.String) defaultValue(fields()[30]);
        record.validTo = fieldSetFlags()[31] ? this.validTo : (java.lang.String) defaultValue(fields()[31]);
        record.workaroundReason = fieldSetFlags()[32] ? this.workaroundReason : (java.lang.String) defaultValue(fields()[32]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<RequestCity>
    WRITER$ = (org.apache.avro.io.DatumWriter<RequestCity>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<RequestCity>
    READER$ = (org.apache.avro.io.DatumReader<RequestCity>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.alternateCodes == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size0 = this.alternateCodes.size();
      out.writeArrayStart();
      out.setItemCount(size0);
      long actualSize0 = 0;
      for (AlternateCodeAvro e0: this.alternateCodes) {
        actualSize0++;
        out.startItem();
        e0.customEncode(out);
      }
      out.writeArrayEnd();
      if (actualSize0 != size0)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");
    }

    if (this.alternateNames == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size1 = this.alternateNames.size();
      out.writeArrayStart();
      out.setItemCount(size1);
      long actualSize1 = 0;
      for (java.lang.String e1: this.alternateNames) {
        actualSize1++;
        out.startItem();
        out.writeString(e1);
      }
      out.writeArrayEnd();
      if (actualSize1 != size1)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");
    }

    if (this.bdaLocations == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.bdaLocations);
    }

    if (this.bdaType == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.bdaType);
    }

    if (this.bdas == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size2 = this.bdas.size();
      out.writeArrayStart();
      out.setItemCount(size2);
      long actualSize2 = 0;
      for (BdaAvro e2: this.bdas) {
        actualSize2++;
        out.startItem();
        e2.customEncode(out);
      }
      out.writeArrayEnd();
      if (actualSize2 != size2)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size2 + ", but element count was " + actualSize2 + ".");
    }

    if (this.country == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.country.customEncode(out);
    }

    if (this.daylightSavingEnd == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.daylightSavingEnd);
    }

    if (this.daylightSavingShiftMinutes == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.daylightSavingShiftMinutes);
    }

    if (this.daylightSavingStart == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.daylightSavingStart);
    }

    if (this.daylightSavingTime == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.daylightSavingTime);
    }

    if (this.description == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.description);
    }

    if (this.dialingCode == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.dialingCode);
    }

    if (this.dialingCodeDescription == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.dialingCodeDescription);
    }

    if (this.geoType == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.geoType);
    }

    if (this.hsudName == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.hsudName);
    }

    if (this.isMaerskCity == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.isMaerskCity);
    }

    if (this.latitude == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.latitude);
    }

    if (this.locationId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.locationId);
    }

    if (this.longitude == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.longitude);
    }

    if (this.name == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.name);
    }

    if (this.olsonTimezone == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.olsonTimezone);
    }

    if (this.parents == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size3 = this.parents.size();
      out.writeArrayStart();
      out.setItemCount(size3);
      long actualSize3 = 0;
      for (ParentAvro e3: this.parents) {
        actualSize3++;
        out.startItem();
        e3.customEncode(out);
      }
      out.writeArrayEnd();
      if (actualSize3 != size3)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size3 + ", but element count was " + actualSize3 + ".");
    }

    if (this.portFlag == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.portFlag);
    }

    if (this.postalCodeMandatory == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.postalCodeMandatory);
    }

    if (this.restricted == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.restricted);
    }

    if (this.stateProvinceMandatory == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.stateProvinceMandatory);
    }

    if (this.status == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.status);
    }

    if (this.subCityParents == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size4 = this.subCityParents.size();
      out.writeArrayStart();
      out.setItemCount(size4);
      long actualSize4 = 0;
      for (java.lang.String e4: this.subCityParents) {
        actualSize4++;
        out.startItem();
        out.writeString(e4);
      }
      out.writeArrayEnd();
      if (actualSize4 != size4)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size4 + ", but element count was " + actualSize4 + ".");
    }

    if (this.timeZone == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.timeZone);
    }

    if (this.utcOffsetMinutes == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.utcOffsetMinutes);
    }

    if (this.validFrom == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.validFrom);
    }

    if (this.validTo == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.validTo);
    }

    if (this.workaroundReason == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.workaroundReason);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.alternateCodes = null;
      } else {
        long size0 = in.readArrayStart();
        java.util.List<AlternateCodeAvro> a0 = this.alternateCodes;
        if (a0 == null) {
          a0 = new SpecificData.Array<AlternateCodeAvro>((int)size0, SCHEMA$.getField("alternateCodes").schema().getTypes().get(1));
          this.alternateCodes = a0;
        } else a0.clear();
        SpecificData.Array<AlternateCodeAvro> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<AlternateCodeAvro>)a0 : null);
        for ( ; 0 < size0; size0 = in.arrayNext()) {
          for ( ; size0 != 0; size0--) {
            AlternateCodeAvro e0 = (ga0 != null ? ga0.peek() : null);
            if (e0 == null) {
              e0 = new AlternateCodeAvro();
            }
            e0.customDecode(in);
            a0.add(e0);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.alternateNames = null;
      } else {
        long size1 = in.readArrayStart();
        java.util.List<java.lang.String> a1 = this.alternateNames;
        if (a1 == null) {
          a1 = new SpecificData.Array<java.lang.String>((int)size1, SCHEMA$.getField("alternateNames").schema().getTypes().get(1));
          this.alternateNames = a1;
        } else a1.clear();
        SpecificData.Array<java.lang.String> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.String>)a1 : null);
        for ( ; 0 < size1; size1 = in.arrayNext()) {
          for ( ; size1 != 0; size1--) {
            java.lang.String e1 = (ga1 != null ? ga1.peek() : null);
            e1 = in.readString();
            a1.add(e1);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.bdaLocations = null;
      } else {
        this.bdaLocations = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.bdaType = null;
      } else {
        this.bdaType = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.bdas = null;
      } else {
        long size2 = in.readArrayStart();
        java.util.List<BdaAvro> a2 = this.bdas;
        if (a2 == null) {
          a2 = new SpecificData.Array<BdaAvro>((int)size2, SCHEMA$.getField("bdas").schema().getTypes().get(1));
          this.bdas = a2;
        } else a2.clear();
        SpecificData.Array<BdaAvro> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<BdaAvro>)a2 : null);
        for ( ; 0 < size2; size2 = in.arrayNext()) {
          for ( ; size2 != 0; size2--) {
            BdaAvro e2 = (ga2 != null ? ga2.peek() : null);
            if (e2 == null) {
              e2 = new BdaAvro();
            }
            e2.customDecode(in);
            a2.add(e2);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.country = null;
      } else {
        if (this.country == null) {
          this.country = new CountryAvro();
        }
        this.country.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.daylightSavingEnd = null;
      } else {
        this.daylightSavingEnd = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.daylightSavingShiftMinutes = null;
      } else {
        this.daylightSavingShiftMinutes = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.daylightSavingStart = null;
      } else {
        this.daylightSavingStart = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.daylightSavingTime = null;
      } else {
        this.daylightSavingTime = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.description = null;
      } else {
        this.description = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.dialingCode = null;
      } else {
        this.dialingCode = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.dialingCodeDescription = null;
      } else {
        this.dialingCodeDescription = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.geoType = null;
      } else {
        this.geoType = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.hsudName = null;
      } else {
        this.hsudName = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.isMaerskCity = null;
      } else {
        this.isMaerskCity = in.readBoolean();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.latitude = null;
      } else {
        this.latitude = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.locationId = null;
      } else {
        this.locationId = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.longitude = null;
      } else {
        this.longitude = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.name = null;
      } else {
        this.name = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.olsonTimezone = null;
      } else {
        this.olsonTimezone = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.parents = null;
      } else {
        long size3 = in.readArrayStart();
        java.util.List<ParentAvro> a3 = this.parents;
        if (a3 == null) {
          a3 = new SpecificData.Array<ParentAvro>((int)size3, SCHEMA$.getField("parents").schema().getTypes().get(1));
          this.parents = a3;
        } else a3.clear();
        SpecificData.Array<ParentAvro> ga3 = (a3 instanceof SpecificData.Array ? (SpecificData.Array<ParentAvro>)a3 : null);
        for ( ; 0 < size3; size3 = in.arrayNext()) {
          for ( ; size3 != 0; size3--) {
            ParentAvro e3 = (ga3 != null ? ga3.peek() : null);
            if (e3 == null) {
              e3 = new ParentAvro();
            }
            e3.customDecode(in);
            a3.add(e3);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.portFlag = null;
      } else {
        this.portFlag = in.readBoolean();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.postalCodeMandatory = null;
      } else {
        this.postalCodeMandatory = in.readBoolean();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.restricted = null;
      } else {
        this.restricted = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.stateProvinceMandatory = null;
      } else {
        this.stateProvinceMandatory = in.readBoolean();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.status = null;
      } else {
        this.status = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.subCityParents = null;
      } else {
        long size4 = in.readArrayStart();
        java.util.List<java.lang.String> a4 = this.subCityParents;
        if (a4 == null) {
          a4 = new SpecificData.Array<java.lang.String>((int)size4, SCHEMA$.getField("subCityParents").schema().getTypes().get(1));
          this.subCityParents = a4;
        } else a4.clear();
        SpecificData.Array<java.lang.String> ga4 = (a4 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.String>)a4 : null);
        for ( ; 0 < size4; size4 = in.arrayNext()) {
          for ( ; size4 != 0; size4--) {
            java.lang.String e4 = (ga4 != null ? ga4.peek() : null);
            e4 = in.readString();
            a4.add(e4);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.timeZone = null;
      } else {
        this.timeZone = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.utcOffsetMinutes = null;
      } else {
        this.utcOffsetMinutes = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.validFrom = null;
      } else {
        this.validFrom = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.validTo = null;
      } else {
        this.validTo = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.workaroundReason = null;
      } else {
        this.workaroundReason = in.readString();
      }

    } else {
      for (int i = 0; i < 33; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.alternateCodes = null;
          } else {
            long size0 = in.readArrayStart();
            java.util.List<AlternateCodeAvro> a0 = this.alternateCodes;
            if (a0 == null) {
              a0 = new SpecificData.Array<AlternateCodeAvro>((int)size0, SCHEMA$.getField("alternateCodes").schema().getTypes().get(1));
              this.alternateCodes = a0;
            } else a0.clear();
            SpecificData.Array<AlternateCodeAvro> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<AlternateCodeAvro>)a0 : null);
            for ( ; 0 < size0; size0 = in.arrayNext()) {
              for ( ; size0 != 0; size0--) {
                AlternateCodeAvro e0 = (ga0 != null ? ga0.peek() : null);
                if (e0 == null) {
                  e0 = new AlternateCodeAvro();
                }
                e0.customDecode(in);
                a0.add(e0);
              }
            }
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.alternateNames = null;
          } else {
            long size1 = in.readArrayStart();
            java.util.List<java.lang.String> a1 = this.alternateNames;
            if (a1 == null) {
              a1 = new SpecificData.Array<java.lang.String>((int)size1, SCHEMA$.getField("alternateNames").schema().getTypes().get(1));
              this.alternateNames = a1;
            } else a1.clear();
            SpecificData.Array<java.lang.String> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.String>)a1 : null);
            for ( ; 0 < size1; size1 = in.arrayNext()) {
              for ( ; size1 != 0; size1--) {
                java.lang.String e1 = (ga1 != null ? ga1.peek() : null);
                e1 = in.readString();
                a1.add(e1);
              }
            }
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.bdaLocations = null;
          } else {
            this.bdaLocations = in.readString();
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.bdaType = null;
          } else {
            this.bdaType = in.readString();
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.bdas = null;
          } else {
            long size2 = in.readArrayStart();
            java.util.List<BdaAvro> a2 = this.bdas;
            if (a2 == null) {
              a2 = new SpecificData.Array<BdaAvro>((int)size2, SCHEMA$.getField("bdas").schema().getTypes().get(1));
              this.bdas = a2;
            } else a2.clear();
            SpecificData.Array<BdaAvro> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<BdaAvro>)a2 : null);
            for ( ; 0 < size2; size2 = in.arrayNext()) {
              for ( ; size2 != 0; size2--) {
                BdaAvro e2 = (ga2 != null ? ga2.peek() : null);
                if (e2 == null) {
                  e2 = new BdaAvro();
                }
                e2.customDecode(in);
                a2.add(e2);
              }
            }
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.country = null;
          } else {
            if (this.country == null) {
              this.country = new CountryAvro();
            }
            this.country.customDecode(in);
          }
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.daylightSavingEnd = null;
          } else {
            this.daylightSavingEnd = in.readString();
          }
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.daylightSavingShiftMinutes = null;
          } else {
            this.daylightSavingShiftMinutes = in.readInt();
          }
          break;

        case 8:
          if (in.readIndex() != 1) {
            in.readNull();
            this.daylightSavingStart = null;
          } else {
            this.daylightSavingStart = in.readString();
          }
          break;

        case 9:
          if (in.readIndex() != 1) {
            in.readNull();
            this.daylightSavingTime = null;
          } else {
            this.daylightSavingTime = in.readString();
          }
          break;

        case 10:
          if (in.readIndex() != 1) {
            in.readNull();
            this.description = null;
          } else {
            this.description = in.readString();
          }
          break;

        case 11:
          if (in.readIndex() != 1) {
            in.readNull();
            this.dialingCode = null;
          } else {
            this.dialingCode = in.readString();
          }
          break;

        case 12:
          if (in.readIndex() != 1) {
            in.readNull();
            this.dialingCodeDescription = null;
          } else {
            this.dialingCodeDescription = in.readString();
          }
          break;

        case 13:
          if (in.readIndex() != 1) {
            in.readNull();
            this.geoType = null;
          } else {
            this.geoType = in.readString();
          }
          break;

        case 14:
          if (in.readIndex() != 1) {
            in.readNull();
            this.hsudName = null;
          } else {
            this.hsudName = in.readString();
          }
          break;

        case 15:
          if (in.readIndex() != 1) {
            in.readNull();
            this.isMaerskCity = null;
          } else {
            this.isMaerskCity = in.readBoolean();
          }
          break;

        case 16:
          if (in.readIndex() != 1) {
            in.readNull();
            this.latitude = null;
          } else {
            this.latitude = in.readString();
          }
          break;

        case 17:
          if (in.readIndex() != 1) {
            in.readNull();
            this.locationId = null;
          } else {
            this.locationId = in.readString();
          }
          break;

        case 18:
          if (in.readIndex() != 1) {
            in.readNull();
            this.longitude = null;
          } else {
            this.longitude = in.readString();
          }
          break;

        case 19:
          if (in.readIndex() != 1) {
            in.readNull();
            this.name = null;
          } else {
            this.name = in.readString();
          }
          break;

        case 20:
          if (in.readIndex() != 1) {
            in.readNull();
            this.olsonTimezone = null;
          } else {
            this.olsonTimezone = in.readString();
          }
          break;

        case 21:
          if (in.readIndex() != 1) {
            in.readNull();
            this.parents = null;
          } else {
            long size3 = in.readArrayStart();
            java.util.List<ParentAvro> a3 = this.parents;
            if (a3 == null) {
              a3 = new SpecificData.Array<ParentAvro>((int)size3, SCHEMA$.getField("parents").schema().getTypes().get(1));
              this.parents = a3;
            } else a3.clear();
            SpecificData.Array<ParentAvro> ga3 = (a3 instanceof SpecificData.Array ? (SpecificData.Array<ParentAvro>)a3 : null);
            for ( ; 0 < size3; size3 = in.arrayNext()) {
              for ( ; size3 != 0; size3--) {
                ParentAvro e3 = (ga3 != null ? ga3.peek() : null);
                if (e3 == null) {
                  e3 = new ParentAvro();
                }
                e3.customDecode(in);
                a3.add(e3);
              }
            }
          }
          break;

        case 22:
          if (in.readIndex() != 1) {
            in.readNull();
            this.portFlag = null;
          } else {
            this.portFlag = in.readBoolean();
          }
          break;

        case 23:
          if (in.readIndex() != 1) {
            in.readNull();
            this.postalCodeMandatory = null;
          } else {
            this.postalCodeMandatory = in.readBoolean();
          }
          break;

        case 24:
          if (in.readIndex() != 1) {
            in.readNull();
            this.restricted = null;
          } else {
            this.restricted = in.readString();
          }
          break;

        case 25:
          if (in.readIndex() != 1) {
            in.readNull();
            this.stateProvinceMandatory = null;
          } else {
            this.stateProvinceMandatory = in.readBoolean();
          }
          break;

        case 26:
          if (in.readIndex() != 1) {
            in.readNull();
            this.status = null;
          } else {
            this.status = in.readString();
          }
          break;

        case 27:
          if (in.readIndex() != 1) {
            in.readNull();
            this.subCityParents = null;
          } else {
            long size4 = in.readArrayStart();
            java.util.List<java.lang.String> a4 = this.subCityParents;
            if (a4 == null) {
              a4 = new SpecificData.Array<java.lang.String>((int)size4, SCHEMA$.getField("subCityParents").schema().getTypes().get(1));
              this.subCityParents = a4;
            } else a4.clear();
            SpecificData.Array<java.lang.String> ga4 = (a4 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.String>)a4 : null);
            for ( ; 0 < size4; size4 = in.arrayNext()) {
              for ( ; size4 != 0; size4--) {
                java.lang.String e4 = (ga4 != null ? ga4.peek() : null);
                e4 = in.readString();
                a4.add(e4);
              }
            }
          }
          break;

        case 28:
          if (in.readIndex() != 1) {
            in.readNull();
            this.timeZone = null;
          } else {
            this.timeZone = in.readString();
          }
          break;

        case 29:
          if (in.readIndex() != 1) {
            in.readNull();
            this.utcOffsetMinutes = null;
          } else {
            this.utcOffsetMinutes = in.readInt();
          }
          break;

        case 30:
          if (in.readIndex() != 1) {
            in.readNull();
            this.validFrom = null;
          } else {
            this.validFrom = in.readString();
          }
          break;

        case 31:
          if (in.readIndex() != 1) {
            in.readNull();
            this.validTo = null;
          } else {
            this.validTo = in.readString();
          }
          break;

        case 32:
          if (in.readIndex() != 1) {
            in.readNull();
            this.workaroundReason = null;
          } else {
            this.workaroundReason = in.readString();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










